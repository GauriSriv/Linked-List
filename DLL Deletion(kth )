#include<iostream>
#include<vector>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node* back;
    
    Node(int d1,Node*n,Node*b)
    {
        data=d1;
        next=n;
        back=b;
    }
    
    Node(int d2)
    {
        data=d2;
        next=nullptr;
        back=nullptr;
    }
};
Node*delete_head(Node* head)
{
    Node*prev=head;
    head=head->next;
    head->back=nullptr;
    prev->next=nullptr;
    delete (prev);
    return head;
}

Node* delete_tail(Node*head)
{
    if(head==NULL || head->next==NULL)
    {
        return NULL;
    }
    Node* tail=head;
    while(tail->next!=NULL)
    {
        tail=tail->next;
    }
    Node*newTail=tail->back;
    newTail->next=nullptr;
    tail->back=nullptr;
    delete tail;
    return head;
}

Node* delete_k(Node* head,int k)
{
    if(head==NULL)
    {
        return NULL;
    }
    int cnt=0;
    Node* knode=head;
    while(knode!=NULL)
    {
        cnt++;
        if(cnt==k)break;
        knode=knode->next;
    }
    Node*prev=knode->back;
    Node*front=knode->next;
    
    if(prev==NULL && front==NULL)
    {
        return NULL;
    }
    else if(prev==NULL)
    {
        return delete_head(head);
    }
    else if(front==NULL)
    {
        return delete_tail(head);
    }
    prev->next=front;     // kth posn
    front->back= prev;
    
    knode->next=nullptr;
    knode->back=nullptr;
    delete knode;
    return head;
}
void print(Node*head)
{
    while(head!=NULL)
    {
        cout<<head->data<<" ";
        head=head->next;
    }
    
}

Node* convert(vector<int>&arr)
{
    Node*head=new Node(arr[0]);
    Node*prev=head;
    for(int i=1;i<arr.size();i++)
    {
        Node*temp=new Node(arr[i],nullptr,prev);
        prev->next=temp;
        prev=temp;
    }
    return head;
}

int main()
{
    vector<int>arr={4,78,9,12};
    Node*head=convert(arr);
    head=delete_k(head,1);
    print(head);
    return 0;
}
